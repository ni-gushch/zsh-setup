on:
  push:
    branches:
      - master
      - ci
  workflow_dispatch:

name: Test
jobs:
  install:
    runs-on: ubuntu-latest
    if: github.repository == 'ni-gushch/zsh-setup' && github.actor == 'ni-gushch'
    strategy:
      matrix:
        os-image:
          - debian-11-x64
          - debian-12-x64
          - ubuntu-22-04-x64
          - ubuntu-24-04-x64
          - fedora-40-x64
          - fedora-41-x64
          # - centos-stream-9-x64 # yum oomkill
    steps:
      - uses: actions/checkout@v5

      - name: Setup doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Create server
        run: doctl compute droplet create openvpn-action-$GITHUB_RUN_ID-$GITHUB_RUN_NUMBER-${{ matrix.os-image }} --size s-1vcpu-1gb --image ${{ matrix.os-image }} --region lon1 --enable-ipv6 --ssh-keys be:66:76:61:a8:71:93:aa:e3:19:ba:d8:0d:d2:2d:d4 --wait

      - name: Get server ID
        run: echo ::set-output name=value::$(doctl compute droplet list -o json | jq -r '.[] | select(.name == "'openvpn-action-$GITHUB_RUN_ID-$GITHUB_RUN_NUMBER-${{ matrix.os-image }}'").id')
        id: server_id

      - name: Move server to dedicated project
        run: doctl projects resources assign ${{ secrets.DIGITALOCEAN_PROJECT_ID }} --resource=do:droplet:${{ steps.server_id.outputs.value }}

      - name: Wait for server to boot
        run: sleep 90

      - name: Get server IP
        run: echo ::set-output name=value::$(doctl compute droplet list -o json | jq -r '.[] | select(.name == "'openvpn-action-$GITHUB_RUN_ID-$GITHUB_RUN_NUMBER-${{ matrix.os-image }}'").networks.v4 | .[] | select(.type == "'public'").ip_address')
        id: server_ip

      - name: Get server OS
        run: echo ::set-output name=value::$(echo ${{ matrix.os-image }} | cut -d '-' -f1)
        id: server_os

      - name: Setup remote server (Debian/Ubuntu)
        if: steps.server_os.outputs.value == 'debian' || steps.server_os.outputs.value == 'ubuntu'
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ steps.server_ip.outputs.value }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: set -x && apt-get update && apt-get -o DPkg::Lock::Timeout=120 install -y git

      - name: Setup remote server (Fedora)
        if: steps.server_os.outputs.value == 'fedora'
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ steps.server_ip.outputs.value }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: set -x && dnf install -y git

      - name: Setup remote server (CentOS)
        if: steps.server_os.outputs.value == 'centos'
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ steps.server_ip.outputs.value }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: set -x && yum install -y git

      - name: Download repo and checkout current commit
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ steps.server_ip.outputs.value }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: set -x && git clone https://github.com/ni-gushch/zsh-setup.git && cd zsh-setup && git checkout ${{ github.sha }}

      - name: Run zsh_setup.sh in headless mode
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ steps.server_ip.outputs.value }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -x
            export AUTO_INSTALL=y
            # Run the setup script and capture exit code
            bash -x ~/zsh-setup/zsh_setup.sh
            EXIT_CODE=$?

            # Additional verification
            echo "=== Additional verification ==="
            [ -f ~/.zshrc ] && echo "✓ .zshrc exists" || echo "✗ .zshrc missing"
            [ -d ~/.oh-my-zsh ] && echo "✓ Oh My Zsh directory exists" || echo "✗ Oh My Zsh directory missing"
            [ -d ~/.oh-my-zsh/custom/themes/powerlevel10k ] && echo "✓ Powerlevel10k exists" || echo "✗ Powerlevel10k missing"
            which zsh >/dev/null 2>&1 && echo "✓ zsh is installed" || echo "✗ zsh not installed"

            # Test if we can source zshrc without errors
            if [ -f ~/.zshrc ]; then
              if zsh -c "source ~/.zshrc && echo '✓ .zshrc can be sourced successfully'"; then
                echo "✓ .zshrc sourcing test passed"
              else
                echo "✗ .zshrc sourcing test failed"
                EXIT_CODE=1
              fi
            fi

            exit $EXIT_CODE

      - name: Delete server
        run: doctl compute droplet delete -f openvpn-action-$GITHUB_RUN_ID-$GITHUB_RUN_NUMBER-${{ matrix.os-image }}
        if: always()
